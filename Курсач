#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#pragma warning(disable : 4996)
#include <locale.h>
#define MAX_MATERIALS 10
#define MAX_FORMS 10

typedef struct {
    char name[20];
    float ratio;
} Material;

typedef struct {
    char name[20];
    int height;
    int length;
    int width;
} Form;

void write_to_file(Material *materials, int numMaterials, Form forms[], int numForms) {
    FILE* file = fopen("data.txt", "w");
    if (file == NULL) {
        printf("Не удалось открыть файл для записи.\n");
        return;
    }

    fprintf(file, "Данные о помещении:\n");
    fprintf(file, "%d\n", numForms);

    for (int i = 0; i < numForms; i++) {
        fprintf(file, "Помещение %s:\n", forms[i].name);
        fprintf(file, "Высота: %d\n", forms[i].height);
        fprintf(file, "Длина: %d\n", forms[i].length);
        fprintf(file, "Ширина: %d\n", forms[i].width);
    }

    fprintf(file, "Материалы:\n");
    fprintf(file, "%d\n", numMaterials);

    for (int i = 0; i < numMaterials; i++) {
        fprintf(file, "%s %.2f\n", materials[i].name, materials[i].ratio);
    }

    fclose(file);
}

void print_form(Form form) {
    printf("Изображение помещения %s высотой %d, длиной %d и шириной %d:\n", form.name, form.height, form.length, form.width);

    for (int i = 0; i < form.height; i++) {
        for (int j = 0; j < form.width; j++) {
            if (i == 0 || i == form.height - 1 || j == 0 || j == form.width - 1) {
                printf("*"); // Грани помещения обозначаются звездочкой
            }
            else {
                printf(" "); // Внутреннее пространство помещения обозначается пробелом
            }
        }
        printf("\n");
    }
}

void print_materials(Material *materials, int numMaterials) {
    for (int i = 0; i < numMaterials; i++) {
        printf("%d. %s - %.2f\n", i + 1, materials[i].name, materials[i].ratio);
    }
}

void modify_form(Form* form) {
    printf("Введите новое название помещения: ");
    scanf(" %19[^\n]", form->name);

    printf("Введите новую высоту помещения: ");
    scanf("%d", &(form->height));

    printf("Введите новую длину помещения: ");
    scanf("%d", &(form->length));

    printf("Введите новую ширину помещения: ");
    scanf("%d", &(form->width));
}

int create_form(Form forms[], int* numForms) {
    if (*numForms < MAX_FORMS) {
        printf("Введите название нового помещения: ");
        scanf(" %19[^\n]", forms[*numForms].name);

        printf("Введите высоту нового помещения: ");
        scanf("%d", &(forms[*numForms].height));

        printf("Введите длину нового помещения: ");
        scanf("%d", &(forms[*numForms].length));

        printf("Введите ширину нового помещения: ");
        scanf("%d", &(forms[*numForms].width));

        (*numForms)++;
        printf("Новая форма помещения успешно создана.\n");
        return 1;
    }
    else {
        printf("Достигнуто максимальное количество форм помещений.\n");
        return 0;
    }
}

int calculate(Material *materials, int numMaterials, Form form) {
    float cement, sand, gravel;

    printf("Введите количество цемента для бетонирования помещения: ");
    scanf("%f", &cement);

    printf("Введите количество песка для бетонирования помещения: ");
    scanf("%f", &sand);

    printf("Введите количество щебня для бетонирования помещения: ");
    scanf("%f", &gravel);

    for (int i = 0; i < numMaterials; i++) {
        if (strcmp(materials[i].name, "цемент") == 0) {
            float cementNeeded = cement / materials[i].ratio * form.height;
            printf("Для бетонирования помещения требуется %.2f кг цемента\n", cementNeeded);
        }
        else if (strcmp(materials[i].name, "песок") == 0) {
            float sandNeeded = sand / materials[i].ratio * form.height;
            printf("Для бетонирования помещения требуется %.2f кг песка\n", sandNeeded);
        }
        else if (strcmp(materials[i].name, "щебень") == 0) {
            float gravelNeeded = gravel / materials[i].ratio * form.height;
            printf("Для бетонирования помещения требуется %.2f кг щебня\n", gravelNeeded);
        }
    }
    return 1;
}

int main() {
    setlocale(LC_ALL, "Russian");
    Material materials[MAX_MATERIALS] = { {"цемент", 1.0}, {"песок", 2.0}, {"щебень", 3.0} };
    int numMaterials = 3;

    Form forms[MAX_FORMS];
    int numForms = 0;

    char choice;
    do {
        printf("\n************************************************************************************************************************\n");
        printf("\n                                                     Приветствую, уважаемый пользователь.\n                                  ");
        printf("\n                         Это программа создана студентом 1-ого курса ВГТУ Колаевым Д.В для курсового проекта на тему:        \n");
        printf("\n                              Разработка калькулятора расчета материалов бетонирования площадки                               \n");
        printf("\n************************************************************************************************************************\n");
        printf("\n*********************************************************Главное меню***************************************************\n");
        printf("1. Записать информацию в файл\n");
        printf("2. Вывести изображение помещения\n");
        printf("3. Показать все формы помещений\n");
        printf("4. Показать все материалы\n");
        printf("5. Изменить информацию о помещении\n");
        printf("6. Рассчитать количество материалов для бетонирования\n");
        printf("7. Создать новую форму помещения\n");
        printf("8. Завершить программу\n");

        printf("Введите выбор: ");
        scanf(" %c", &choice);

        switch (choice) {
        case '1':
            write_to_file(materials, numMaterials, forms, numForms);
            printf("Информация успешно записана в файл.\n");
            break;
        case '2':
            if (numForms > 0) {
                printf("Доступные помещения для вывода изображения:\n");
                for (int i = 0; i < numForms; i++) {
                    printf("%d. %s\n", i + 1, forms[i].name);
                }
                printf("Выберите номер помещения для вывода изображения: ");
                int formIndex;
                scanf("%d", &formIndex);

                if (formIndex >= 1 && formIndex <= numForms) {
                    print_form(forms[formIndex - 1]);
                }
                else {
                    printf("Неправильный номер помещения.\n");
                }
            }
            else {
                printf("Не определены формы помещений.\n");
            }
            break;
        case '3':
            if (numForms > 0) {
                for (int i = 0; i < numForms; i++) {
                    print_form(forms[i]);
                }
            }
            else {
                printf("Не определены формы помещений.\n");
            }
            break;
        case '4':
            if (numMaterials > 0) {
                print_materials(materials, numMaterials);
            }
            else {
                printf("Не определены материалы.\n");
            }
            break;
        case '5':
            if (numForms > 0) {
                printf("Выберите номер помещения для изменения информации: ");
                int formIndex;
                scanf("%d", &formIndex);

                if (formIndex >= 1 && formIndex <= numForms) {
                    modify_form(&forms[formIndex - 1]);
                    printf("Информация о помещении успешно изменена.\n");
                }
                else {
                    printf("Неправильный номер помещения.\n");
                }
            }
            else {
                printf("Не определены формы помещений.\n");
            }
            break;
        case '6':
            if (numForms > 0) {
                printf("Выберите номер помещения для расчета материалов: ");
                int formIndex;
                scanf("%d", &formIndex);

                if (formIndex >= 1 && formIndex <= numForms) {
                    calculate(materials, numMaterials, forms[formIndex - 1]);
                }
                else {
                    printf("Неправильный номер помещения.\n");
                }
            }
            else {
                printf("Не определены формы помещений.\n");
            }
            break;
        case '7':
            if (create_form(forms, &numForms)) {
                printf("Новая форма помещения успешно создана.\n");
            }
            else {
                printf("Не удалось создать новую форму помещения.\n");
            }
            break;
        case '8':
            printf("Программа завершена.\n");
            break;
        default:
            printf("Неправильный выбор. Пожалуйста, выберите снова.\n");
        }
    } while (choice != '8');

    return 0;
}
